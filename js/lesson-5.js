// Объект - это структура данных, которая позволяет описывать сущность, у которой много характеристик.
// Это структура данных, которая позволяет хранить в одной переменной описательные характеристики (свойства) одной сущности.
// Объект также позволяет хранить методы для работы с этими данными.

// Суммирование материала - https://youtu.be/hiMeVdmq9hY?t=1304

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// СОЗДАНИЕ ОБЪЕКТА

// Создание объекта происходит путем присвоения переменной литерала объекта - {}.
// Объект состоит из набора свойств и методов.
// Каждое свойство состоит из имени (ключа) и значения, которые разделяются двоеточием.
// Свойства разделются запятой.
// Имя (ключ) свойства - всегда строка.
// Значением свойста может быть что угодно: другой объект, функция, массив, буль и т. д.

const object = {
  key: 'value',
  'key to all doors': 'money',
  product: 'computer',
};

console.log(object);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// СВОЙСТВА ОБЪЕКТА

// Первый способ "достучаться" к свойству объекта (используется практически всегда).
// Синтаксис: имя_объекта.имя_свойства_объекта
console.log(object.key);
// Возвращает значение свойства объекта.
// При обращении к свойству, которого у объекта нету, будет возвращен undefined.

// Второй способ "достучаться" к свойству объекта (используется редко -
// когда у свойства сложное имя (содержит пробелы, тире) или когда оно хранится в переменной).
// Синтаксис: имя_объекта['сложное_имя_свойства']
console.log(object['key to all doors']);
// или
// Синтаксис: имя_объекта[имя_переменной_в_которой_хранится_имя_свойства]
let abc = 'product';
console.log(object[abc]);

// Изменить значение свойства объекта можно так:
object.key = 'value1';
console.log(object);

// Если указанного свойства у объекта нет, оно будет создано с заданным значением.
object.name = 'aaa';
console.log(object);

// Если такое свойство есть, но с другим значением, то это значение будет перезаписано.
object.name = 'bbb';
console.log(object);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// Объект - это ссылочный тип. Копируется по ссылке, не по значению.

const a = {
  x: 1,
  y: 2,
};

const b = a;

console.log(b === a); // true

const c = {
  x: 1,
  y: 2,
};

console.log(a === c); // false

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// В JS и массив, и функция - это объекты (внезапно!). Если точнее - специальные подвиды объекта.

const arr = ['a', 'b', 'c'];
console.table(arr);

arr.hello = ':)';
console.table(arr);

const fn = function () {};

fn.hello = 'xD';
console.log(fn.hello);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// МЕТОДЫ ОБЪЕКТА

// Методы объекта - это функции, которые позволяют изменять значения его свойств.
// Как и свойства, они хранятся в объекте.
// Для обращения к свойсту объекта внутри метода этого объекта используется НЕ ИМЯ ОБЪЕКТА,
// а зарезервированное слово this (ссылка на этот объект).
// Так же можна обратится и к другому методу объекта.

// Метод объекта - это его свойство, значение которого - функция.

const hotel = {
  name: 'Sunset resort',
  stars: 5,
  capacity: 200,

  // Старый синтаксис метода объекта
  // updateName: function (newName) {
  //   this.name = newName;
  // },

  // Новый синтаксис метода объекта
  updateName(newName) {
    this.name = newName;
  },
};

console.log(hotel);

hotel.updateName('Lagoon');

console.log(hotel);

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// ПЕРЕБОР ОБЪЕКТА

// Перебрать объект можна несколькими способами:

// 1. Использую цикл for...in - old-school вариант

// Синтаксис:
// for (const имя_переменной in имя_объекта)
// Существует негласное правило - в этом цикле называть переменную key.

const feedback = {
  good: 5,
  neutral: 10,
  bad: 3,
};

let totalFeedback = 0;

for (const key in feedback) {
  console.log(key);

  console.log(feedback.key);
  // При переборе объекта в цикле for...in имена его свойств записывается в переменную key.
  // Поэтому так "достучатся" к свойству объекта не получится.
  // Интерпретатор будет искать в объекте свойство с именем key, которого там нет.
  // Результатом будет undefined.

  console.log(feedback[key]);
  // Правильный способ получить доступ к свойству объекта в цикле for...in.

  totalFeedback += feedback[key];
}

console.log('Total:', totalFeedback);

// 2. Используя статические методы родительского конструктора Object - современный JS

// 2.1. Object.keys()
// Синтаксис: Object.keys(имя_объекта)

// Результатом вызова метода будет массив имен (ключей) свойств объекта, который можна записать в переменную с произвольным имененем.
// const имя_переменной = Object.keys(имя_объекта)

const keys = Object.keys(feedback);
console.log(keys);

// 2.2. Object.values()
// Синтаксис: Object.values(имя_объекта)

// Результатом вызова метода будет массив значений свойств объекта, который можна записать в переменную с произвольным имененем.
// const имя_переменной = Object.values(имя_объекта)

const values = Object.values(feedback);
console.log(values);

// 2.3. Object.entries()
// Синтаксис: Object.values(имя_объекта)

// Результатом вызова метода будет массив массивов, которые состоят из имени свойства и его значения.
// Используется редко.

console.log(Object.entries(feedback));

// Ни на одном объекте, у которого есть методы, не вызывается ни Object.keys, ни Object.values, ни Object.entries.
// Они нужны только для объектов, у которых есть данные, но нет методов для работы с ними.

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *

// ПРАКТИКА

// https://youtu.be/hiMeVdmq9hY?t=2372

// В большинстве случаев работают не с объектами, а с массивами объектов.
// Работая с масивом объектов, удобно использовать console.table().
// Работа с массивом объектов в большинстве случаев - это перебор массива в цикле + сравнение значений.

// Пример: поиск друга по имени

const friends = [
  { name: 'Mango', online: false },
  { name: 'Kiwi', online: true },
  { name: 'Poly', online: true },
  { name: 'Ajax', online: false },
];

console.table(friends);

const findFriendByName = function (allFriends, name) {
  for (const friend of allFriends) {
    console.log(friend);

    if (friend.name === name) {
      return 'Нашли!!!';
    }
  }

  return 'Не нашли!!!';
};

console.log(findFriendByName(friends, 'Poly'));
console.log(findFriendByName(friends, 'Chelsy'));

// Пример: получение имен всех друзей

const getAllFriendsNames = function (allFriends) {
  const names = [];

  for (const friend of allFriends) {
    console.log(friend);

    names.push(friend.name);
  }

  return names;
};

console.log(getAllFriendsNames(friends));

// Пример: получение имен друзей, которые онлайн

const getOnlineFriends = function (allFriends) {
  const names = [];

  for (const friend of allFriends) {
    console.log(friend);

    if (friend.online) {
      names.push(friend.name);
    }
  }

  return names;
};

console.log(getOnlineFriends(friends));
